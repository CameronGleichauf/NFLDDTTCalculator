<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NFL Draft Trade Calculator</title>
  <style>
      .team-card {
          border: 1px solid #ccc;
          padding: 10px;
          margin: 10px;
          min-width: 320px;
          display: inline-block;
          text-align: left;
      }
  </style>
</head>
<body>
<p style="color: green"><%= notice %></p>

<h1>NFL Draft Trade Calculator</h1>
<button id="evaluate-trade-button" style="display: none; margin: 0 auto;">Evaluate this trade</button>
<div class="upper-left">
  <div class="button-container">
    <%= link_to "Trade Calculator", root_path, class: "button" %>
  </div>

  <div class="button-container">
    <%= link_to "Teams View", teams_path, class: "button" %>
  </div>
</div>
<div class="teams-container">
  <%= render partial: 'shared/team_picks', locals: { team: @starting_team, prefix: "Starting " } %>
  <%= render partial: 'shared/team_picks', locals: { team: @target_team, prefix: "Target " } %>
</div>

<script>
    var startingTeamId = <%= @starting_team.id %>;
    var targetTeamId = <%= @target_team.id %>;

    document.addEventListener("DOMContentLoaded", function () {

        const evaluateTradeButton = document.getElementById("evaluate-trade-button");

        let picks = [];

        fetch("/picks")
          .then(response => response.json())
          .then(data => {
              picks = data;
          })
          .catch(error => {
              console.error("Error fetching picks:", error);
          });

        function updateButtonVisibility() {
            var teamCards = document.getElementsByClassName("team-card");
            var startingTeam = teamCards.item(0);
            var targetTeam = teamCards.item(1);
            const startingTeamPicks = Array.from(startingTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
                .map(pick => pick.textContent.trim()).length;
            const targetTeamPicks = Array.from(targetTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
                .map(pick => pick.textContent.trim()).length;

            if (startingTeamPicks > 0 && targetTeamPicks > 0) {
                evaluateTradeButton.style.display = "block";
                evaluateTradeButton.style.alignContent = "center";
            } else {
                evaluateTradeButton.style.display = "none";
            }
        }

        document.querySelectorAll(".trade-button").forEach(function (button) {
            button.addEventListener("click", function () {
                this.parentElement.classList.toggle("highlight");
                updateButtonVisibility();
            });
        });

        document.getElementById("evaluate-trade-button").addEventListener("click", function () {
            const startingTeamName = "<%= @starting_team&.name %>";
            const targetTeamName = "<%= @target_team&.name %>";

            var teamCards = document.getElementsByClassName("team-card");
            var startingTeam = teamCards.item(0);
            var targetTeam = teamCards.item(1);

            let startingTeamPickIds = [];
            let targetTeamPickIds = [];

            Array.from(startingTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
              .forEach(pick => {
                  console.log(pick);
                  const pickId = pick.querySelector('.pick-id').dataset.pickId;
                  startingTeamPickIds.push(pickId);
              });

            Array.from(targetTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
              .forEach(pick => {
                  const pickId = pick.querySelector('.pick-id').dataset.pickId;
                  targetTeamPickIds.push(pickId);
              });


            const startingTeamPicks = Array.from(startingTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
                .map(pick => pick.textContent.trim());
            const targetTeamPicks = Array.from(targetTeam.getElementsByClassName("left-aligned-list").item(0).getElementsByClassName("highlight"))
                .map(pick => pick.textContent.trim());

            function formatPicks(picks) {
                const formattedPicks = picks.map(pick => `â€¢ ${pick}`);
                // hacky solution come back and refactor if u can cam
                let formattedString = formattedPicks.slice(0, -2).join('<br>') + (formattedPicks.length > 2 ? '<br>' : '') + formattedPicks.slice(-2).join('<br>');
                formattedString = formattedString.split('\n')[0];
                return formattedString
            }

            const startingTeamTotalValue = startingTeamPicks.reduce((total, pick) => {
                const value = parseFloat(pick.split("Value: ")[1]);
                return total + value;
            }, 0);

            const targetTeamTotalValue = targetTeamPicks.reduce((total, pick) => {
                const value = parseFloat(pick.split("Value: ")[1]);
                return total + value;
            }, 0);

            let winner;
            if (startingTeamTotalValue > targetTeamTotalValue) {
                winner = targetTeamName;
            } else if (targetTeamTotalValue > startingTeamTotalValue) {
                winner = startingTeamName;
            } else {
                winner = "It's a tie!";
            }

            const winnerAmount = Math.abs(startingTeamTotalValue - targetTeamTotalValue);
            // round and truncate to avoid edge case
            const truncatedWinnerAmount = Math.round(winnerAmount * 10) / 10;

            document.body.innerHTML = `
<div class="winner">
    <p><strong>Winner: ${winner}</strong></p>
    <p>${winner} are projected to win this trade by: <strong>${truncatedWinnerAmount}</strong> points</p>
</div>
<div class="upper-left">
  <div class="button-container">
    <%= link_to "Teams View", teams_path, class: "button" %>
  </div>
</div>
<button id="save-trade-button">Save Trade</button>
<button id="discard-trade-button">Discard Trade</button>
<div class="teams-container">
        <div class="team">
            <h2 class="team-name">Starting Team: ${startingTeamName}</h2>
            <p style="text-align: left;">Outgoing Picks:</p>
            <p class="left-aligned-list">${formatPicks(startingTeamPicks)}</p>
            <p style="text-align: left;">Incoming Picks:</p>
            <p class="left-aligned-list">${formatPicks(targetTeamPicks)}</p>
            <p style="text-align: left;">Outgoing Capital Value: ${startingTeamTotalValue}</p>
            <p style="text-align: left;">Incoming Capital Value: ${targetTeamTotalValue}</p>
        </div>
        <div class="team">
            <h2 class="team-name">Target Team: ${targetTeamName}</h2>
            <p style="text-align: left;">Outgoing Picks:</p>
            <p class="left-aligned-list">${formatPicks(targetTeamPicks)}</p>
            <p style="text-align: left;">Incoming Picks:</p>
            <p class="left-aligned-list">${formatPicks(startingTeamPicks)}</p>
            <p style="text-align: left;">Outgoing Capital Value: ${targetTeamTotalValue}</p>
            <p style="text-align: left;">Incoming Capital Value: ${startingTeamTotalValue}</p>
    </div>
</div>`;

            document.getElementById("save-trade-button").addEventListener("click", function () {
                saveTrade(startingTeamPickIds, targetTeamPickIds);
            });

            const discardTradeButton = document.getElementById("discard-trade-button");
            discardTradeButton.addEventListener("click", function() {
                window.location.href = '/'; // Assuming '/' is the home route
            });
        });

        function saveTrade(startingTeamPickIds, targetTeamPickIds) {
            var data = {
                trade: {
                    starting_team_id: startingTeamId,
                    target_team_id: targetTeamId,
                    starting_team_pick_ids: startingTeamPickIds,
                    target_team_pick_ids: targetTeamPickIds,
                }
            };

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/trades/save_trade", true);
            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.onload = function() {
                if (xhr.status === 201) {
                    console.log("Trade saved successfully.");
                    alert("Trade saved successfully!");
                    // send us back to home page cam
                    window.location.href = "/";
                } else {
                    console.error("Error saving trade:", xhr.statusText);
                    alert("Trade failed to save!");
                }
            };

            xhr.onerror = function() {
                console.error("Request failed.");
            };

            xhr.send(JSON.stringify(data));
        }
    });


</script>
</body>
</html>